' Aufgabe:
' Modellieren Sie die Zusammenhänge und typischen Methoden
    ' der Klassen Professor, Student, Course und Exam.
    ' Als besondere Anforderung gilt: Es gibt Prüfungen, welche
    ' nur durch einen Professor durchgeführt werden dürfen und
    ' welche nur durch zwei Instanzen des Datentyps Professor (gemeinsam)
    ' durchgeführt werden dürfen. Eine Prüfung darf entsprechend durch
    ' einen Professor initiiert werden, aber die beiden Prüfer müssen bekannt
    ' sein und deren zeitliche Verfügbarkeit überprüfbar sein. 
'Modellieren Sie das Klassendiagramm.
'Notieren Sie die beschriebenen Anforderungen und Ihre Annahmen präzise.

' zusätzlich:
    ' Es ist möglich, dass Studierende in Teilzeit oder in Vollzeit studieren.
    ' Es gibt verschiedene 4 Dozentenarten: Professoren (Professor),
        ' Gast-Professoren (GuestProfessor), Lehrbeauftrage (Lecturer),
        ' Lehrkraft für besondere Aufgaben (TeacherForSpecialTasks). 
    ' Es gibt viele verschiedene Prüfungsarten,
        ' z. B. Klausuren (WrittenExam; mehrere Teilnehmer an der Prüfung möglich),
        ' Präsentationen (Presentation; nur ein Teilnehmer möglich).
        ' Alle Prüfungen verfügen über ein Datum, an dem sie durchgeführt werden.
        ' Es muss davon ausgegangen, dass neue Prüfungsformen angelegt werden können.
    ' Es muss sichergestellt sein, dass konkrete Prüfungen (Instanzen) nur von Professoren
    ' angelegt werden dürfen.
        ' Es wird als Fehler in der Ausführung (Runtime) betrachtet, wenn Studierende
        ' sich nach dem Durchführungsdatum an eine Prüfung anmelden wollen.


' Annahmen:
    ' Professoren können mehrere Prüfungen durchführen.
    ' verschiedene Prüfungsarten bestehen
    ' Students können sich für Prüfungen anmelden
    ' Students können an Kursen teilnehmen
    ' Kurse können Prüfungen organisieren
    ' 
@startuml

' Enum für Studienmodus der Studierenden
enum StudyMode {
    FULL_TIME
    PART_TIME
}

' Enum für Prüfungsarten
enum ExamType {
    SINGLE_PROFESSOR
    DOUBLE_PROFESSOR
}

' Interface für verschiedene Dozententypen
interface FacultyMember {
    +checkAvailability(): Boolean
}

' Spezifische Dozententypen als Subklassen
class Professor extends FacultyMember
class GuestProfessor extends FacultyMember
class Lecturer extends FacultyMember
class TeacherForSpecialTasks extends FacultyMember

' Klasse Student mit zusätzlichen Attributen
class Student {
    -studentId: String
    -name: String
    -studyMode: StudyMode
    +enroll(course: Course): void
    +registerForExam(exam: Exam): void
}

' Interface Exam mit Datum und Validierungsmethoden
interface ExamKinds {
    +schedule(professors: Professor[]): Boolean
    +validateEnrollmentDate(student: Student): Boolean
}

' Abstrakte Klasse für verschiedene Prüfungsarten
abstract class Exam implements ExamKinds {
    -examId: String
    -date: Date
    -time: Time
    -examType: ExamType
}

' Spezifische Prüfungsarten als Subklassen von Exam
class WrittenExam extends Exam {
    +validateEnrollmentDate(student: Student): Boolean
}

class Presentation extends Exam {
    +validateEnrollmentDate(student: Student): Boolean
}

' Klasse Course mit Beziehung zu Prüfungen und Studenten
class Course {
    -courseId: String
    -title: String
    +addStudent(student: Student): void
    +removeStudent(student: Student): void
    +scheduleExam(exam: Exam): void
}

' Assoziationen und Kardinalitäten
Professor "1..*" -- "1" Exam : Examiner
Student "0..*" -- "1" Exam : takes part
Course "1" -- "0..*" Exam : organises
Course "0..*" -- "1" Student : contains
Exam "1" -- "0..*" Student : has participants

' Zusätzliche Notizen
note right of Student
    Student kann entweder in Vollzeit
    oder Teilzeit studieren.
    Studienmodus wird durch das
    Enum StudyMode definiert.
end note

note right of FacultyMember
    Verschiedene Dozententypen, die dieselben Methoden teilen
    - Professor (Professor)
    - Gast-Professor (GuestProfessor)
    - Lehrbeauftragte (Lecturer)
    - Lehrkraft für besondere Aufgaben (TeacherForSpecialTasks)
end note

note right of ExamKinds
    Exam darf nur durch Professoren angelegt werden.
    Prüfungsarten sind mit Erzeugung von
    Unterklassen erweiterbar (z. B. WrittenExam, Presentation).
    WrittenExam erlaubt mehrere Teilnehmer
    Presentation nur einen Teilnehmer.
end note

note left of Course
    Kurse können Prüfungen organisieren
    und Studenten beinhalten.
end note

@enduml
